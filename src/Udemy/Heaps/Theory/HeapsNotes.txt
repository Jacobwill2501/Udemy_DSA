Heaps
- A complete binary tree
- Must satisfy the heap property
- Max heap: Every parent is greater than or equal to its children
    - All the values in a single path from the root are in descending order
- Min heap: Every parent is less than or equal to its children
    - All the values in a single path from the root are in ascending order
- Heaps give min or max values in constant time

- A binary heap must be a complete tree
- Children are added at each level from left to right
- Usually implemented as arrays
- The maximum or minimum value will always be at the root of the tree - the advantage of using a heap
- Heapify: process of converting a binary tree into a heap -
    this often has to be done after an insertion or deletion
- No required ordering between siblings

Heaps as Arrays
- We can store binary heaps as arrays
- We put the root at array[0]
- We then traverse each level from left to right, and so the left child of the root would go into array[1],
    its right child would to into array[2], etc.

For the node at array[i]:
left child = 2i + 1
right child = 2i + 2
parent = floor((i - 1) / 2)

Insert into Heap O(log n)
- Always add new items to the end of the array
- Then we have to fix the heap (heapify)
- We compare the new item against its parent
- If the item is greater than its parent, we swap it with its parent
- We then rinse and repeat

Heaps - Delete O(n)
 - Must choose a replacement value
 - Will take the rightmost value, so that the tree remains complete
 - Then we must heapify the heap
 - When replacement value is greater than parent, fix heap above. Otherwise, fix heap below

 - Fix heap above - same as insert. Swap replacement value with parent.
 - Fix heap below - swap the replacement value with the larger of its two children
 - Rinse and repeat in both case until the replacement value is in its correct position
 - Will only need to fix up or down, not both


Priority Queues are typically implemented as a max heap
PriorityQueue in JDK
- no limited size
- implemeneted as min heap
- not synced

Heaps - Sort
- We know the root has the largest value
- Swap root with the last element in the array
- Heapify the tree, but exclude the last node
- After heapify, second largest element is at the root
- Rinse and repeat