
 ***Binary Search***

- Data must be sorted!
- Chooses the element in the middle of the array and compares it against the search value
- If element is equal to the value, we're done
- If element is greater than the value, search the left half of the array
- If the element is less than the value, search the right half of the array
- end will always be one greater

{-22, -15, 1, 7, 20 , 35, 55}

Search value = 1

start = 0
end = 7
midpoint = (start+end)/2 = 3
array[midpoint] = 7 - this is greater than 1 so go to first half

{-22, -15, 1, 7, 20 , 35, 55}

Search value = 1

start = 0
end = midpoint = 3
midpoint = (start+end)/2 = 1
array[midpoint] = -15 - this is less than 1 so go to right half

{-22, -15, 1, 7, 20 , 35, 55}

Search value = 1

start = midpoint + 1 = 2
end = 3
midpoint = (start+end)/2 = 2
array[midpoint] = 1 - we found our value

- At some point, there will only be one element in the partition you're checking,
    but it doesn't have to get to that point
- Can be implemented recursively
- O(log n) - keeps dividing the array in half